"""

2023 - Analysis of Orthologous Collections (AOC).
@Author: Alexander G. Lucaci

"""

# =============================================================================
# Imports
# =============================================================================

import itertools
import os
import sys
import csv
import json
from pathlib import Path
from snakemake.utils import min_version
min_version("7.20")
from Bio import Entrez
from ete3 import NCBITaxa
import pandas as pd
from ete3 import Tree
import glob
#from tqdm import tqdm

# =============================================================================
# Configuration
# =============================================================================

configfile: 'config.yml'

print("# Loaded configuration YAML file from", 'config.yml')

cluster_json = "cluster.json"

with open(cluster_json, "r") as fh:
  cluster = json.load(fh)
  fh.close()
#end with

print("# Loaded cluster configuration JSON file:", cluster_json)
 
Label = config["Label"]

Taxon = config["Taxon"]

# Get working directory
BASEDIR = os.getcwd()

TEST_MODE = False

if TEST_MODE == True:
    Nucleotide_file = os.path.join(BASEDIR, 
                                   "test", 
                                   config["TEST_NUCLEOTIDE"])
    
    Protein_file    = os.path.join(BASEDIR, 
                                   "test", 
                                   config["TEST_PROTEIN"])  
else:
    Nucleotide_file = os.path.join(BASEDIR, 
                                   "data",  
                                   Taxon,
                                   config["Nucleotide"])
    
    Protein_file    = os.path.join(BASEDIR, 
                                   "data", 
                                   Taxon, 
                                   config["Protein"])
#end if

CSV = os.path.join(BASEDIR, 
                   "data", 
                   Taxon, 
                   config["CSV"])

print("# We are operating out of base directory:", 
      BASEDIR)

print("# Using nucleotide data from:", 
      Nucleotide_file)

print("# Using protein data from:", 
      Protein_file)

print("# Using the analysis label:", 
      Label)

print("# Using the CSV Ortholog file:", 
      CSV)

# Create output directories
os.makedirs(os.path.join(BASEDIR, 
                         "results"), 
                         exist_ok = True)

OUTPUT_DIR = os.path.join(BASEDIR, 
                          "results", 
                          Taxon)

os.makedirs(OUTPUT_DIR, 
            exist_ok = True)

#print("# Directory '% s' created" % OUTPUT_DIR)

print("# We will create and store results in:", 
      OUTPUT_DIR)

# =============================================================================
# Compute settings
# =============================================================================

PPN = cluster["__default__"]["ppn"]

# =============================================================================
# Batch files
# =============================================================================

PREMSA = os.path.join(BASEDIR, 
                      config["PREMSA"])

POSTMSA = os.path.join(BASEDIR, 
                       config["POSTMSA"])

FILTER_OUTLIERS_BF = os.path.join(BASEDIR, 
                                  "hyphy-analyses", 
                                  "find-outliers", 
                                  "find-outliers-slac.bf")

FITMG94 = os.path.join(BASEDIR, 
                       "hyphy-analyses", 
                       "FitMG94", 
                       "FitMG94.bf")

# =============================================================================
# Hard-coded HyPhy settings
# =============================================================================

HYPHY = config["HYPHY"]
HYPHYMPI = config["HYPHYMPI"]

# =============================================================================
# Clustering threshold hyperparameter
# =============================================================================

TN93_T = config["TN93_Threshold"]

# =============================================================================
# Recombination-free file.
# =============================================================================

RECOMBINATION_FREE = os.path.join(BASEDIR, 
                                   "results",  
                                   config["RECOMBINATION_FREE"])

RECOMBINATION_FREE_BASENAME = os.path.basename(RECOMBINATION_FREE)

# =============================================================================
# Rule all
# =============================================================================

rule all:
    input:
        os.path.join(OUTPUT_DIR, 
                     RECOMBINATION_FREE_BASENAME + ".treefile"),
        os.path.join(OUTPUT_DIR, RECOMBINATION_FREE_BASENAME + ".FEL.json"),
        os.path.join(OUTPUT_DIR, RECOMBINATION_FREE_BASENAME + ".SLAC.json")
#end rule all

# =============================================================================
# Rules
# =============================================================================

rule iqtree: # Unrooted
    input:
        codons_fas = RECOMBINATION_FREE
    output:
        tree = os.path.join(OUTPUT_DIR, 
                     RECOMBINATION_FREE_BASENAME + ".treefile")
    shell:
        "iqtree -s {input.codons_fas} -T AUTO -B 1000"
    #end shell
#end rule iqtree

# =============================================================================
# Selection Analyses
# =============================================================================

rule FEL_Recombinants:
    input: 
        codon_aln = RECOMBINATION_FREE,
        tree = rules.iqtree.output.tree
    output: 
        output = os.path.join(OUTPUT_DIR,
                              RECOMBINATION_FREE_BASENAME + ".FEL.json")
    shell: 
        "mpirun -np {PPN} {HYPHYMPI} FEL --alignment {input.codon_aln} --tree {input.tree} --output {output.output} --ci Yes"
#end rule

rule SLAC_Recombinants:
    input: 
        codon_aln = RECOMBINATION_FREE,
        tree = rules.iqtree.output.tree
    output: 
        output = os.path.join(OUTPUT_DIR,
                              RECOMBINATION_FREE_BASENAME + ".SLAC.json")
    shell: 
        "mpirun -np {PPN} {HYPHYMPI} SLAC --alignment {input.codon_aln} --tree {input.tree} --output {output.output} --samples 100"
#end rule


# =============================================================================
# End of file
# =============================================================================

